# main.py
import os
import asyncio
from aiohttp import web
from telethon import TelegramClient, events
from telethon.sessions import StringSession

# ======= ENV =======
API_ID = int(os.getenv("API_ID", "0"))
API_HASH = os.getenv("API_HASH", "")
STRING_SESSION = os.getenv("STRING_SESSION", "")  # —Å–º. –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–∏–∂–µ
SOURCE_CHANNEL = os.getenv("SOURCE_CHANNEL", "aerogrill_recepti")
TARGET_CHANNEL = os.getenv("TARGET_CHANNEL", "CookingWithGrill")

# ======= TELETHON CLIENT =======
if not (API_ID and API_HASH and STRING_SESSION):
    raise RuntimeError("–ó–∞–ø–æ–ª–Ω–∏ API_ID, API_HASH –∏ STRING_SESSION –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

client = TelegramClient(StringSession(STRING_SESSION), API_ID, API_HASH)

print("–Ø —Ä–æ–¥–∏–ª—Å—è!")

def del_bad_from_str(msg: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–∫–æ–±–∫–∞—Ö [ ] –∏ ( ), 
    –∞ —Ç–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã.
    """
    replacements = {"‚è∞": "üïê", "üìñ": "‚ú®", "üå°Ô∏è": "üî•"}
    result = []
    skip = False
    for ch in msg:
        if skip:
            if ch in ("]", ")"):
                skip = False
            continue
        if ch in ("[", "("):
            skip = True
            continue
        result.append(replacements.get(ch, ch))
    return "".join(result)

def is_post(msg: str) -> bool:
    "–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Å—Ç –ª–∏ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Å–∫–∞—á–∞–ª–∏"
    return "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!" in msg

@client.on(events.NewMessage(chats=SOURCE_CHANNEL))
async def handler(event):
    msg = event.message
    raw_text = (msg.text or msg.message or "")
    if not is_post(raw_text):
        print("–°–∫–∞—á–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–µ –ø–æ—Å—Ç")
        return
    clean_text = del_bad_from_str(raw_text) if raw_text else ""
    if msg.media:
        await client.send_file(TARGET_CHANNEL, msg.media, caption=clean_text)
    else:
        if clean_text.strip():
            await client.send_message(TARGET_CHANNEL, clean_text)
        else:
            print("–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

# ======= AIOHTTP APP (–¥–ª—è Render) =======
async def health(request):
    # –ø—Ä–æ—Å—Ç–æ–π healthcheck ‚Äî Render –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
    return web.Response(text="ok")

async def on_startup(app):
    await client.start()
    # –∑–∞–ø—É—Å–∫–∞–µ–º Telethon-–ø–µ—Ç–ª—é –≤ —Ñ–æ–Ω–µ
    app["tg_task"] = asyncio.create_task(client.run_until_disconnected())
    print("Telegram client started")

async def on_cleanup(app):
    await client.disconnect()
    tg_task = app.get("tg_task")
    if tg_task:
        tg_task.cancel()
        with contextlib.suppress(asyncio.CancelledError):
            await tg_task

def make_app():
    app = web.Application()
    app.router.add_get("/", health)
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_cleanup)
    return app

if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    web.run_app(make_app(), host="0.0.0.0", port=port)
